GOAL
----
1. Solution updated to best browser security
   Also must have good developer productivity for local web developers
   Also must have best code portability for APIs

CURRENT FOCUS
-------------
1. Use the error custom header to check CORS for token handler 4xx and 5xx responses

2. Serverless API does not return error responses with the correct CORS headers.
   Maybe this is a gateway problem that requires custom resources in serverless.yml.
   Though I hope that only applies to authorizers?

3. Then Serverless API needs to be updated to be more efficient.
   This requires an AWS cache - and the Serverless API is therefore the main focus.

DEVELOPER PRODUCTIVITY
----------------------
1. Running Charles Proxy locally causes problems for outgoing calls from Docker
   This makes debugging of the current problem difficult
   Token Handler API cannot call login.authsamples.com

2. When running locally, use NGINX to modify the CORS response header for 401s and 500s
   The Serverless API may end up being hard coded to return https://web.authsamples.com
   Change this for developer environments to https://web.authsamples.com

MERGES
------
1. Above work done and cloud system works and works on Windows
   Then update blog quickly and trim it down

2. Final APIs run locally and kong.yml can be updated at deployment time with API URL
   Java and .Net Core final APIs to set credentials: true in their CORS options
   - First run the API
   - Then run the SPA with './deploy.sh localapi' which should run this repo with './deploy.sh localapi'

3. Also add a way to run the Token Handler API outside of Docker

ERRORS
------
1. Client should not need to read token handler error codes and should just deal with 401s
   Return 401s to the SPA and a generic unauthorized error code
   Ensure that BFF PLUGIN errors (code and message) are reported correctly by the SPA

2. API logs to handle separate error details for service and client
   Distinct codes in the service, single code for the client

3. Serverless error logging to a server code used in logs and a generic client code

4. Lessons learned from WebSample1 / End-to-End / SPA revamp consolidated
   End to end Docker to get working again

5. Better error codes and responses for CSRF conditions in Serverless API
   Same server / client logging differences as above

CONSOLIDATION
-------------
1. Use jose in NodeJS APIs

2. SPAs to do DOM updates as for sample1.NEW

3. Get rid of url-parse

4. Get rid of tunnel-agent, as for websample1.NEW and check HTTP proxy still works

5. SPA should indicate token-handler and not proxyApi

6. API logging to get rid of separate authorizer log entry

UI CONSOLIDATION
----------------
1. Deal with expire errors in the UI and clearing them once working again

BLOG
----
1. Blog post theme should be productive developer setup techniques.

2. Landscape is either simpler setup via ASP.Net / Spring Boot but with many follow on issues.
   Cookies add a lot of complexity and Docker is the best you can do, though separation it tricky.

3. Discuss details of where logs go, eg on npm run lambda

4. More about running the components after initial run of build script
   Stress standard node - eg do a 'npm start' to restart

README
------
1. Indicate that I am updating my stuff in line with Curity pattern