API PHASE 1
-----------
1. AWS deployment with no Express dependencies
   Get rid of tunnel agent dependency also

2. Complete the logout processing
   Use a configuration flag to control Cognito specific login URL handling

SPA PHASE 1
-----------
1. Branch of oauth.websample.final, with web reverse proxy and oidc client removed
   Check in with very clean code and a new authenticator implementation
   Use / rename / revamp existing web reverse proxy client but extend it with explicit operations
   Start by throwing not implemented errors for operations that OIDC client implemented previously

2. SPA branch to get browser calls working
   Store state between requests in sesson storage
   Add CORS middleware to API and write allow-credentials in response
   Add OPTIONS requests to curl tests

3. Test in all 4 browsers including Incognito mode

FINALIZATION
------------
0. Test strategy to ensure Serverless working on a developer PC
   Ideally I want to run bash scripts and test all at once, but also have options to test individually
   Consider options between 'sls invoke', bash and NodeJS code and perhaps mix them up to build modular tests

1. Validate id token and check AT hash - cf oidc client library
   Should I use a nonce? - and properly understand its role from IETF docs

2. Get Kubernetes deployment working for the proxy API and test with Curity

3. Add logging middleware and log to the Elastic Search schema
   Detailed error testing of API operations to test each failure point
   Use my standard client error object

4. Update READMEs

5. Test this from a multi tab browser viewpoint
   Are there any 401 race conditions that the SPA cannot handle?

6. Proper API logging and write to Elastic Search from AWS
   Logging also needs to use abstract request and response objects

7. Use acr_values
   Manage redirect URI and idp parameter via a server side strategy if needed

8. Think about paths and multiple SPAs


9. Deploy to Kubetneres without any Serverless code or dependencies
