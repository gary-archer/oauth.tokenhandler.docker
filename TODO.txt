SPA PHASE 1
-----------
1. SPA branch to get browser calls working via POSTs
   Authenticator mostly just does Axios posts similar to old webReverseProxyClient but with json
   Store state between requests in session storage
   SPA also needs to store anti forgery token from response body in local storage
   Do I need lax for redirect and state cookie?

2. Test in all 4 browsers including Incognito mode
   Understand whether the overall solution is on track

3. Test this from a multi tab browser viewpoint
   Are there any 401 concurrency conditions that the SPA cannot handle?

API PHASE 1
-----------
1. AWS deployment with no Express dependencies
   Get rid of tunnel agent dependency also similar to main Serverless sample

2. Implement logout processing
   Use a configuration flag to control Cognito specific login URL handling

OAUTH FINALIZATION
------------------
1. Update READMEs

2. Validate id token and check AT hash - cf oidc client library

3. Think about paths and multiple SPAs
   Are there vulnerabilities here?
   More work on giving the 3 service classes reduced configuration - eg only entry point uses the host configuration

4. Get Kubernetes deployment working for the proxy API and test with Curity
   Remove Serverless dependencies

CONSOLIDATION
-------------
1. Test strategy to ensure Serverless working on a developer PC
   Ideally I want to run bash scripts and test all at once, but also have options to test individually
   Consider options between 'sls invoke', bash and NodeJS code and perhaps mix them up to build modular tests

2. Add logging middleware and log to the Elastic Search schema
   Logging also needs to use abstract request and response objects
   Data queryable in Elastic Cloud

3. Use acr_values
   Manage redirect URI and idp parameter via a Cognito specific server side strategy if needed

4. Use authsamples.local instead of mycompany.com