service: oauthwebproxy

# Base details for AWS deployment
provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-2
  profile: default
  stage: ${self:custom.config.settings.stage}
  lambdaHashingVersion: '20201221'
  apiGateway:
    shouldStartNameWithService: true

custom:
  # Each environment can have its own configuration file
  config: ${file(environments/${opt:stage, 'local'}.yml)}
  
  # AWS deployed details
  customDomain:
    domainName: ${self:custom.config.settings.apiHostName}
    certificateName: '*.${self:custom.config.settings.certificateDomainName}'
    basePath: oauthwebproxy
    stage: ${self:custom.config.settings.stage}
    endpointType: regional

  # Headers that will be accepted by AWS
  allowedHeaders:
    - Content-Type
    - Accept
    - Cookie
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - x-mycompany-finalspa-aft

functions:
  
  authorizationCodeGrant:
    handler: dist/lambda/handlers/authorizationCodeGrant.handler
    events:
      - http: 
          path: /authorization-code-grant
          method: post
          cors:
            origins:
              - ${self:custom.config.settings.trustedOrigin}
              - ${self:custom.config.settings.trustedDevOrigin}
            headers: ${self:custom.allowedHeaders}

  refreshTokenGrant:
    handler: dist/lambda/handlers/refreshTokenGrant.handler
    events:
      - http: 
          path: /refresh-token-grant
          method: post
          cors:
            origins:
              - ${self:custom.config.settings.trustedOrigin}
              - ${self:custom.config.settings.trustedDevOrigin}
            headers: ${self:custom.allowedHeaders}

  expireRefreshToken:
    handler: dist/lambda/handlers/expireRefreshToken.handler
    events:
      - http: 
          path: /expire-refresh-token
          method: post
          cors:
            origins:
              - ${self:custom.config.settings.trustedOrigin}
              - ${self:custom.config.settings.trustedDevOrigin}
            headers: ${self:custom.allowedHeaders}

  expireSession:
    handler: dist/lambda/handlers/expireSession.handler
    events:
      - http: 
          path: /expire-session
          method: delete
          cors:
            origins:
              - ${self:custom.config.settings.trustedOrigin}
              - ${self:custom.config.settings.trustedDevOrigin}
            headers: ${self:custom.allowedHeaders}

# By default all files are included so remove files we don't need for any lambda
package:
  patterns:
  - '!.vscode/**'
  - '!environments/**'
  - '!src/**'
  - '!test/**'
  - '!ts*.json'
  - '!package*.json'
  - '!README.md'
  - '!LICENSE.txt'

plugins:
  - serverless-plugin-scripts
  - serverless-domain-manager

resources:
  Resources:

    # Limit cloudwatch log retention 
    AuthorizationCodeGrantLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: '5'
    RefreshTokenGrantLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: '5'
    ExpireRefreshTokenLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: '5'
    ExpireSessionLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: '5'