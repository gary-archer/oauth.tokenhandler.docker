1. Skeleton of all operations with tests and curl requests:
   completeLogin
   refreshAccessToken
   getAccessToken
   expireRefreshToken
   expireAuthCookie
   Then Write the GitHub README and 

2. Implement API code until good enough for SPA to connect to
   Do so by pulling code out of webreverseproxy repo
   Unit tested operations via curl

3. Branch of SPA called feature/oauthwebproxy
   Remove oidc client completely
   Can connect to OAuth proxy on local PC
   Remove reverse proxy stuff from README and emphasize use of 'back end for front end'

4. New SPA code to write
   Form the OpenID Connect URL
   Calculate the state and the PKCE details
   Add withCredentials to axios calls

5. Deploy branch as /spa2 with a new temporary OAuth Client in AWS
   Remove SPA strategies and always show all header buttons
   Only ever use a single strategy of proxying, for a clearer message
   
6. SPA by default calls the OAuth proxy in the cloud
   Articles need to explain how to switch to local

7. New API code to write
   Validate id token and check AT hash - cf oidc client library

8. API to write a new anti forgery token after every refresh for better OWASP reviews
   But think about this from a multi tab browser viewpoint
   Are there any 401 race conditions that the SPA cannot handle?
