SERVERLESS
----------
1. Needs to handle cookies with the same logic as the BFF Plugin
   Use a concept of access token retriever - either simple header lookup or more complex
   Decryption happens every time but the same caching mechanism is used, via a policy document
   If no token in the Authorization Header then look for AT and CSRF cookies
   Extra lambda authorizer test case using cookied captured from HTTP proxy
   Code can focus on logic around decryption, and just return a generic 401 on error
   Update error logging to a server code used in logs and a generic client code

2. Update default setup to use business API at https://api.authsamples.com
   Cloud lambda can be updated and will remain backwards compatible
   Once working I can deploy everything else

ERRORS
------
1. Client should not need to read token handler error codes and should just deal with 401s
   Return 401s to the SPA and a generic unauthorized error code
   Ensure that BFF PLUGIN errors (code and message) are reported correctly by the SPA

2. API logs to handle separate error details for service and client
   Distinct codes in the service, single code for the client

MILESTONES
----------
1. Update cloud from branches, then test on Windows, then merge code
   Blog updated in a basic way, with deletion of junk, and sample instructions still working

2. Local APIs work in a good way
   Also the ability to run the Token Handler under development, on port 446

3. Lessons learned from WebSample1 / End-to-End / SPA revamp consolidated
   End to end Docker to get working again

INCREMENTAL
-----------
1. Use jose in NodeJS APIs

2. SPAs to do DOM updates as for sample1.NEW

3. Get rid of url-parse

4. Get rid of tunnel-agent, as for websample1.NEW and check HTTP proxy still works

CODE CONSOLIDATION
------------------
1. Deal with expire errors in the UI and clearing them once working again

2. Java and .Net Core final APIs to set credentials: true in their CORS options

BLOG
----
1. Refer to Curity for security solution
   Blog post theme should be productive developer setup techniques.

2. Discuss details of where logs go, eg on npm run lambda

3. Landscape is either simpler setup via ASP.Net / Spring Boot but with many follow on issues.
   Cookies add a lot of complexity and Docker is the best you can do, though separation it tricky.

4. More about running the components after initial run of build script
   Eg: stond and do a 'npm start'

CURITY
------
1. Bug in plugin:
   https://github.com/curityio/kong-bff-plugin/blob/master/plugin/access.lua#L104

2. Make sure web and token handler repos point nicely to docs